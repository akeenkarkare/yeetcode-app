name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # First, run all tests to ensure quality
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:coverage
      
    - name: Get Playwright version
      id: playwright-version
      run: echo "version=$(npx playwright --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')" >> $GITHUB_OUTPUT
      
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
        
    - name: Install Playwright browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          libasound2-dev \
          libgtk-3-dev \
          libxss1 \
          libgconf-2-4 \
          libxtst6 \
          libxrandr2 \
          libasound2 \
          libpangocairo-1.0-0 \
          libatk1.0-0 \
          libcairo-gobject2 \
          libgtk-3-0 \
          libgdk-pixbuf2.0-0
        
    - name: Run E2E tests
      env:
        CI: true
        DISPLAY: :99.0
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        npm run test:e2e

  # Build and release for multiple platforms
  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Vite assets
      run: npm run build
      
    - name: Package Electron app
      run: npm run package
      
    - name: Create distributables
      run: npm run make
      
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-distributables
        path: |
          out/make/deb/x64/*.deb
          out/make/rpm/x64/*.rpm
        retention-days: 30
        
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-distributables
        path: |
          out/make/squirrel.windows/x64/*.exe
          out/make/zip/win32/x64/*.zip
        retention-days: 30
        
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-distributables
        path: |
          out/make/zip/darwin/x64/*.zip
          out/make/zip/darwin/arm64/*.zip
        retention-days: 30

  # Create GitHub release with all artifacts
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Display structure of downloaded files
      run: ls -la ./artifacts/
      
    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: YeetCode ${{ steps.get_version.outputs.version }}
        body: |
          ## üöÄ YeetCode ${{ steps.get_version.outputs.version }}
          
          ### What's New
          - Latest features and improvements
          - Bug fixes and performance optimizations
          - Enhanced desktop experience
          
          ### Download
          Choose the appropriate version for your operating system:
          
          **Windows:**
          - `.exe` - Windows installer
          - `.zip` - Portable version
          
          **macOS:**
          - `.zip` - Universal app (Intel & Apple Silicon)
          
          **Linux:**
          - `.deb` - Debian/Ubuntu package
          - `.rpm` - Red Hat/Fedora package
          
          ### Installation
          
          **Windows:** Run the `.exe` installer or extract the `.zip` file
          **macOS:** Extract the `.zip` file and drag to Applications folder
          **Linux:** Install the `.deb` or `.rpm` package using your package manager
          
          ### System Requirements
          - Windows 10 or later
          - macOS 10.15 or later
          - Linux (Ubuntu 18.04+ or equivalent)
          
          ---
          
          **Full Changelog:** https://github.com/${{ github.repository }}/compare/v${{ steps.get_version.outputs.version }}...HEAD
        draft: false
        prerelease: false
        files: |
          ./artifacts/linux-distributables/*
          ./artifacts/windows-distributables/*
          ./artifacts/macos-distributables/*
        
  # Optional: Deploy to additional platforms
  deploy:
    needs: release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Notify deployment success
      run: |
        echo "üéâ Release ${{ needs.release.outputs.version }} deployed successfully!"
        echo "üì¶ Artifacts available at: https://github.com/${{ github.repository }}/releases/latest"
        
    # Future: Add auto-update server deployment, website updates, etc.
    - name: Update website (placeholder)
      run: |
        echo "üåê Website update placeholder"
        echo "This is where you could trigger website updates, documentation builds, etc." 